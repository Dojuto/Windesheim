
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000325e  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002de2  00000000  00000000  000034b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ca  00000000  00000000  00006298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00006664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017ed  00000000  00000000  00006688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ad  00000000  00000000  00007e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00007f22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 86 00 	call	0x10c	; 0x10c <main>
 104:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <main>:
int main(void)
{
	// Zet pin 2 van poort E als invoer (schakelaar 2)
	
	// Zet pin 0 van poort E als uitvoer (LED 2)
	PORTE.DIR |= PIN0_bm;
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24

	bool last_sw2_status = false;
	bool led_state = false;
 116:	40 e0       	ldi	r20, 0x00	; 0
	// Zet pin 2 van poort E als invoer (schakelaar 2)
	
	// Zet pin 0 van poort E als uitvoer (LED 2)
	PORTE.DIR |= PIN0_bm;

	bool last_sw2_status = false;
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x12>
#include <avr/io.h>
#include <stdbool.h>
#include <util/delay.h> // Voor _delay_ms functie

int main(void)
{
 11c:	38 2f       	mov	r19, r24
	bool led_state = false;

	while (1)
	{
		// Lees de status van schakelaar 2 en debounce
		bool sw2_status = !(PORTE.IN & PIN2_bm); // Activeer bij lage invoer
 11e:	90 91 88 04 	lds	r25, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7e0488>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	29 2f       	mov	r18, r25
 126:	24 70       	andi	r18, 0x04	; 4
 128:	92 fd       	sbrc	r25, 2
 12a:	80 e0       	ldi	r24, 0x00	; 0

		// Debounce: wacht even en lees opnieuw om te controleren
		if (sw2_status)
 12c:	21 11       	cpse	r18, r1
 12e:	0d c0       	rjmp	.+26     	; 0x14a <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	83 ed       	ldi	r24, 0xD3	; 211
 132:	90 e3       	ldi	r25, 0x30	; 48
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x28>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x2e>
 13a:	00 00       	nop
		{
			_delay_ms(50); // Wacht 50 milliseconden
			sw2_status = !(PORTE.IN & PIN2_bm); // Lees opnieuw
 13c:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7e0488>
 140:	86 95       	lsr	r24
 142:	86 95       	lsr	r24
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	89 27       	eor	r24, r25
 148:	81 70       	andi	r24, 0x01	; 1
		}

		if (sw2_status && !last_sw2_status) // Detecteer de stijgende flank
 14a:	88 23       	and	r24, r24
 14c:	39 f3       	breq	.-50     	; 0x11c <main+0x10>
 14e:	31 11       	cpse	r19, r1
 150:	e5 cf       	rjmp	.-54     	; 0x11c <main+0x10>
		{
			led_state = !led_state; // Wissel de toestand van de LED
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	49 27       	eor	r20, r25
			if (led_state)
 156:	31 f0       	breq	.+12     	; 0x164 <main+0x58>
			{
				PORTE.OUT |= PIN0_bm; // Zet de LED aan
 158:	e0 e8       	ldi	r30, 0x80	; 128
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	94 81       	ldd	r25, Z+4	; 0x04
 15e:	91 60       	ori	r25, 0x01	; 1
 160:	94 83       	std	Z+4, r25	; 0x04
 162:	dc cf       	rjmp	.-72     	; 0x11c <main+0x10>
			}
			else
			{
				PORTE.OUT &= ~PIN0_bm; // Zet de LED uit
 164:	e0 e8       	ldi	r30, 0x80	; 128
 166:	f4 e0       	ldi	r31, 0x04	; 4
 168:	94 81       	ldd	r25, Z+4	; 0x04
 16a:	9e 7f       	andi	r25, 0xFE	; 254
 16c:	94 83       	std	Z+4, r25	; 0x04
 16e:	d6 cf       	rjmp	.-84     	; 0x11c <main+0x10>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
