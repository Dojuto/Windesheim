
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031db  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d92  00000000  00000000  0000343f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000388  00000000  00000000  000061d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000655c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000177c  00000000  00000000  00006580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002a  00000000  00000000  00007cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00007d26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 86 00 	call	0x10c	; 0x10c <main>
 104:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <main>:
{
	// |= Bitje hoog
	// &=~ Bitje laag
	// ^= Toggle bit
	//PORTE.DIR |= PIN0_bm;
	PORTE.DIR |= 0b00000001;
 10c:	e0 e8       	ldi	r30, 0x80	; 128
 10e:	f4 e0       	ldi	r31, 0x04	; 4
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	PORTD.DIR |= 0b00100000;
 116:	e0 e6       	ldi	r30, 0x60	; 96
 118:	f4 e0       	ldi	r31, 0x04	; 4
 11a:	80 81       	ld	r24, Z
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	80 83       	st	Z, r24
    while (1) 
    {
		
		uint8_t sw1_status = !(PORTE.IN & PIN3_bm);
 120:	e0 e8       	ldi	r30, 0x80	; 128
 122:	f4 e0       	ldi	r31, 0x04	; 4
 124:	80 85       	ldd	r24, Z+8	; 0x08
 126:	88 70       	andi	r24, 0x08	; 8
 128:	90 e0       	ldi	r25, 0x00	; 0
		uint8_t sw2_status = !(PORTE.IN & PIN2_bm);
 12a:	40 85       	ldd	r20, Z+8	; 0x08
 12c:	44 70       	andi	r20, 0x04	; 4
 12e:	50 e0       	ldi	r21, 0x00	; 0
		uint8_t sw3_status = !(PORTE.IN & PIN1_bm);
 130:	20 85       	ldd	r18, Z+8	; 0x08
 132:	22 70       	andi	r18, 0x02	; 2
 134:	30 e0       	ldi	r19, 0x00	; 0
		
		
		
		if ((sw1_status && sw2_status && !sw3_status) || (sw3_status && sw1_status &&!sw2_status) || (sw2_status && sw3_status && !sw1_status))
 136:	00 97       	sbiw	r24, 0x00	; 0
 138:	31 f4       	brne	.+12     	; 0x146 <main+0x3a>
 13a:	41 15       	cp	r20, r1
 13c:	51 05       	cpc	r21, r1
 13e:	19 f4       	brne	.+6      	; 0x146 <main+0x3a>
 140:	21 15       	cp	r18, r1
 142:	31 05       	cpc	r19, r1
 144:	71 f4       	brne	.+28     	; 0x162 <main+0x56>
 146:	21 15       	cp	r18, r1
 148:	31 05       	cpc	r19, r1
 14a:	29 f4       	brne	.+10     	; 0x156 <main+0x4a>
 14c:	00 97       	sbiw	r24, 0x00	; 0
 14e:	19 f4       	brne	.+6      	; 0x156 <main+0x4a>
 150:	41 15       	cp	r20, r1
 152:	51 05       	cpc	r21, r1
 154:	31 f4       	brne	.+12     	; 0x162 <main+0x56>
 156:	45 2b       	or	r20, r21
 158:	51 f4       	brne	.+20     	; 0x16e <main+0x62>
 15a:	23 2b       	or	r18, r19
 15c:	41 f4       	brne	.+16     	; 0x16e <main+0x62>
 15e:	89 2b       	or	r24, r25
 160:	31 f0       	breq	.+12     	; 0x16e <main+0x62>
		{
			
			
			PORTD.OUT &=~ PIN5_bm;
 162:	e0 e6       	ldi	r30, 0x60	; 96
 164:	f4 e0       	ldi	r31, 0x04	; 4
 166:	84 81       	ldd	r24, Z+4	; 0x04
 168:	8f 7d       	andi	r24, 0xDF	; 223
 16a:	84 83       	std	Z+4, r24	; 0x04
 16c:	d9 cf       	rjmp	.-78     	; 0x120 <main+0x14>
		}
		else 
		{
			PORTD.OUT |= PIN5_bm;
 16e:	e0 e6       	ldi	r30, 0x60	; 96
 170:	f4 e0       	ldi	r31, 0x04	; 4
 172:	84 81       	ldd	r24, Z+4	; 0x04
 174:	80 62       	ori	r24, 0x20	; 32
 176:	84 83       	std	Z+4, r24	; 0x04
 178:	d3 cf       	rjmp	.-90     	; 0x120 <main+0x14>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
